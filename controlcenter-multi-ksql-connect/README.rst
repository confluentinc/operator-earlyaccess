Connect Control Center to Multiple Connect and ksqlDB Clusters
==============================================================

In this workflow scenario, you'll set up Confluent Control Center to connect and
monitor multiple Connect and ksqlDB clusters.

The Confluent Platform components will communicate via internal listeners with
the TLS encryption and mTLS authentication.

Before you begin this tutorial:

* `Set up the prerequisites <https://github.com/confluentinc/operator-earlyaccess#pre-requisites>`__.

* `Create the namespace for the tutorials <https://github.com/confluentinc/operator-earlyaccess#set-up-the-kubernetes-cluster>`__.

* `Configure the Early Access credentials <https://github.com/confluentinc/operator-earlyaccess#configure-early-access-credentials>`__.

* `Clone the tutorial repo <https://github.com/confluentinc/operator-earlyaccess#download-confluent-operator-tutorial-package>`__.

To complete this scenario, you'll follow these steps:

#. Set the current tutorial directory.

#. Deploy Confluent Operator.

#. Deploy configuration Secrets.

#. Deploy Confluent Platform.

#. Validate.

#. Tear down Confluent Platform and the tutorial environment.

==================================
Set the current tutorial directory
==================================

Set the tutorial directory for this tutorial under the directory you downloaded
the tutorial files:

::
   
  export TUTORIAL_HOME=<Tutorial directory>/controlcenter-multi-ksql-connect

=========================
Deploy Confluent Operator
=========================

The assumption is that youâ€™ve set up Early Access credentials following `the
instruction
<https://github.com/confluentinc/operator-earlyaccess/blob/master/README.rst>`__.

#. Install Confluent Operator using Helm:

   ::

     helm upgrade --install operator confluentinc_earlyaccess/confluent-operator \
        --set image.registry=confluent-docker-internal-early-access-operator-2.jfrog.io
  
#. Check that the Confluent Operator pod comes up and is running:

   ::
     
     kubectl get pods

============================
Deploy configuration Secrets
============================

You'll use Kubernetes Secrets to provide credential configurations.

With Kubernetes Secrets, credential management (defining, configuring, updating)
can be done outside of the Confluent Operator. You define the configuration
Secret, and then tell Confluent Operator where to find the configuration.

To support the above deployment scenario, you need to provide the following
credentials:

* Root Certificate Authority to auto-generate certificates

* Authentication credentials for Confluent Platform components.

Provide a Root Certificate Authority
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Confluent Operator provides auto-generated certificates for Confluent Platform
components to use for inter-component TLS. You'll need to generate and provide a
Root Certificate Authority (CA).

#. Generate a CA pair to use in this tutorial:

   ::

     openssl genrsa -out $TUTORIAL_HOME/ca-key.pem 2048
    
   ::

     openssl req -new -key $TUTORIAL_HOME/ca-key.pem -x509 \
       -days 1000 \
       -out $TUTORIAL_HOME/ca.pem \
       -subj "/C=US/ST=CA/L=MountainView/O=Confluent/OU=Operator/CN=TestCA"

#. Create a Kuebernetes Secret for inter-component TLS:

   ::

     kubectl create secret tls ca-pair-sslcerts \
       --cert=$TUTORIAL_HOME/ca.pem \
       --key=$TUTORIAL_HOME/ca-key.pem

========================================
Review Confluent Platform configurations
========================================

You install Confluent Platform components as custom resources (CRs). 

The Confluent Platform components are configured in one file:
``$TUTORIAL_HOME/confluent-platform.yaml``

Let's take a look at how these components are configured.

* Configure mTLS authentication for Kafka:

  ::
  
    spec:
      listeners:
        internal:
          authentication:
            type: mtls
          tls:
            enabled: true

* Configure mTLS authentication to Kafka for other components:
 
  ::
  
    spec:
      dependencies:
        kafka:
          bootstrapEndpoint: kafka.confluent.svc.cluster.local:9071
          authentication:
            type: mtls
          tls:
            enabled: true

* Configure auto generated certificates for all server components:

  :: 
  
    spec:
      tls:
        autoGeneratedCerts: true

* Two cluster of Connect and two clusters of ksqlDB are configured, each with a unique name. 

* Multiple Connect and ksqlDB clusters are specified under ``dependencies:`` in the Control Center section:

  ::
  
    apiVersion: platform.confluent.io/v1beta1
    kind: ControlCenter
    metadata:
      name: controlcenter
      namespace: confluent
    spec:
      dependencies:
        ksqldb:
        - name: ksql-dev
          url: https://ksqldb.confluent.svc.cluster.local:8088
          tls:
            enabled: true
          authentication:
            type: mtls
        - name: ksql-dev1
          url: https://ksqldb-dev.confluent.svc.cluster.local:8088
          tls:
            enabled: true
          authentication:
            type: mtls
        connect:
        - name: connect-dev
          url: https://connect.confluent.svc.cluster.local:8083
          tls:
            enabled: true
          authentication:
            type: mtls
        - name: connect-dev2 
          url: https://connect-dev.confluent.svc.cluster.local:8083
          tls:
            enabled: true
          authentication:
            type: mtls

=========================
Deploy Confluent Platform
=========================

#. Deploy Confluent Platform with the above configuration:

   ::

     kubectl apply -f $TUTORIAL_HOME/confluent-platform.yaml

#. Check that all Confluent Platform resources are deployed:

   ::
   
     kubectl get confluent

#. Get the status of any component. For example, to check Control Center:

   ::
   
     kubectl describe controlcenter
  
========
Validate
========

Validate in Control Center
^^^^^^^^^^^^^^^^^^^^^^^^^^

Use Confluent Control Center to monitor the Confluent Platform, and see the
created topic and data.

#. Set up port forwarding to Control Center web UI from local machine:

   ::

     kubectl port-forward controlcenter-0 9021:9021

#. Browse to Control Center:

   ::
   
     https://localhost:9021

#. Navigate to **ksqlDB** and see two ksqlDB clusters are available for you to manage.

#. Navigate to **Connect** and see two Connect clusters are available for you to manage.

=========
Tear down
=========

::

  kubectl delete -f $TUTORIAL_HOME/confluent-platform.yaml

::

  kubectl delete secret ca-pair-sslcerts

::

  helm delete operator
  